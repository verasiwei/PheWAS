#!/usr/bin/env Rscript
#===PheWAS Pipeline=======
#TBILab: Siwei Zhang
#December, 2018

#===========User Input============#
#This pipeline do the data clean, so just input the SD data files.
#phenotype data is a sparse matrix for all population based on summary level(binary of whether counts>1)
#demographics file is also for all populationlibrary(eply)

args=commandArgs(trailingOnly=TRUE)
dir=args[1]
cores=args[2]
additive=args[3]
sigthreshold=args[4]
#genotypes=args[6]
#phenotypes=args[6]
#demographics=args[7]


library(devtools)
library(PheWAS)
library(dplyr)
library(tidyr)
library(ggplot2)
library(parallel)
library(MASS)
library(meta)
library(ggrepel)
library(DT)
library(Matrix)

#==========Prepare the input file==========#
#setwd("~/phewas")
setwd("/proj/PI_SAVONA/Projects/CHIP_PheWAS/.common/data/phewas")
#genotypes=read.table("rs2736100_overdominant.csv",header = TRUE,sep = ",")
colnames(genotypes)[1]="id"
str(genotypes)


#prepare the phenotype file
phenotypes_dat=function(){
  dat=load("GRID_PHECODE.Aug2017.pivot.RData")
  return(get(dat))
}
pheno_dat=phenotypes_dat()
str(phenotypes_dat)
#update phenotypes file
phenotypes_dat=phenotypes_dat[phenotypes_dat@Dimnames[[1]] %in% genotypes[,"id"],]
#colnames(phenotypes_dat)=substring(colnames(phenotypes_dat),2)
genotypes=genotypes[genotypes$id %in% phenotypes_dat@Dimnames[[1]],]

#prepare covariates data
message("begin preparing covariates data")
demo_dat=function(){
  dat=load("GRID_DEMOGRAPHICS.Aug2017.RData")
  return(get(dat))
}
demo_dat=demo_dat()
#another choice
demo_dat=read.table("match_demo_dat_JAK2.csv",header = TRUE,sep = ",")
demo_dat=demo_dat[which(demo_dat$id %in% phenotypes_dat@Dimnames[[1]]),]
#colnames(demo_dat)[1]="id"
#prepare covariates file
demo_dat=demo_dat[which(demo_dat$GRID_DEMOGRAPHICS %in% phenotypes_dat@Dimnames[[1]]),]
caselist=genotypes[which(genotypes$group==1),"id"]
totallist=demo_dat$GRID_DEMOGRAPHICS
demo_dat$group=ifelse(demo_dat$GRID_DEMOGRAPHICS %in% caselist,"1","0")
#update genotypes and phenotypes data if some people do not match in phenotype data
genotypes=genotypes[genotypes$id %in% demo_dat$GRID_DEMOGRAPHICS,]
str(genotypes)
phenotypes_dat=phenotypes_dat[phenotypes_dat@Dimnames[[1]] %in% demo_dat$GRID_DEMOGRAPHICS,]
str(phenotypes_dat)
#calculate phenome burden
phenome_burden_dat=data.frame("GRID_DEMOGRAPHICS"=names(rowSums(phenotypes_dat,na.rm = TRUE)),
                              "phenome_burden"=unname(rowSums(phenotypes_dat,na.rm = TRUE)))
demo_dat=merge(demo_dat,phenome_burden_dat,by="GRID_DEMOGRAPHICS",sort = FALSE)
demo_dat$age=as.integer(floor((Sys.Date()-as.Date(demo_dat$DOB))/365))
#calculate age, no information indicate when people died, cannot calculate age for those dead people
#demo_dat$age=floor(Sys.Data()-as.Date(demo_dat$DOB))/365)
demo_dat$group=as.factor(demo_dat$group)
demo_dat$SEX=as.factor(demo_dat$SEX)
#demo_dat=demo_dat[which(demo_dat$SEX!="UNK"),]
demo_dat$phenome_burden=as.integer(demo_dat$phenome_burden)
levels(demo_dat$RACE)=c("OTHER","B","OTHER","OTHER","OTHER","OTHER","W")
rownames(demo_dat)=demo_dat$id
colnames(demo_dat)[1]="id"
head(demo_dat)


#phenotypes_dat=as.data.frame(as.matrix(phenotypes_dat))
id=phenotypes_dat@Dimnames[[1]]
phecode=phenotypes_dat@Dimnames[[2]]
#matrix to a dgCMatrix
#setAs("lgCMatrix","dgCMatrix",function(from) new("dgCMatrix", i = from@i, p = from@p,
#                                                 x = as.double(from@x),
#                                                 Dim = from@Dim, Dimnames = from@Dimnames))
#message("begin transforming to dgCMatrix")
#phenotypes_dat=as(phenotypes_dat,"dgCMatrix")
#phenotypes_dat=as.spam.dgCMatrix(phenotypes_dat)
message("transform to dataframe(matrix)")
phenotypes_dat=data.frame(as.matrix(phenotypes_dat))
colnames(phenotypes_dat)=phecode
phenotypes_dat$id=id
#have a look of phenotype data
head(phenotypes_dat[1:20,1:20])
head(phenotypes_dat$id)
#update pheno_dat data
message("finish cleaning phenotype data")
str(phenotypes_dat)


#return(list("genotypes"=genotypes,
#            "phenotypes"=phenotypes_dat,
#            "covariates"=demo_dat))

#pre_input_dat=pre_input()
#the phenotype data will be used in phewas
#save(phenotypes_dat,file = paste(dir,"phenotypes_dat_DNMT3A_matched.RData",sep = ""))
#write.table(demo_dat,file = paste(dir,"demographics_dat_DNMAT2A_matched.csv",sep = ""),row.names=FALSE,col.names=TRUE,sep=",")

#===========PheWAS=========#
cores=as.numeric(cores)
additive=as.logical(additive)
#the number of cases at least larger than 50
#after applying at least 50 cases
#phenotype50=apply(phenotypes_dat[,-1817], 2, function(x) sum(x,na.rm = TRUE)>=50)
#phenotype50=which(phenotype50=="TRUE")
results=phewas(phenotypes =phenotypes_dat, genotypes = genotypes, 
               cores = 20,  covariates = demo_dat[,c("id","EHRAge","SEX","RACE","phenome_burden","age")],
               significance.threshold = "bonferroni", additive.genotypes = FALSE)
head(results)
#arrange the results
library(readxl)
phecode_description=read_excel("phecode_description.xlsx")
phecode_description=phecode_description[which(!duplicated(phecode_description$PheCode)),]
colnames(results)[1]="PheCode"
results_description=merge(results,phecode_description,by="PheCode",sort = FALSE)
results_description=results_description[,c(1,19,10,11,4,5,6,7)]
colnames(results_description)=c("PheCode (v1.2)","Descripton","n_cases","n_controls","beta","SE","OR","pvalue")
results_description=results_description[order(results_description$pvalue),]
setwd("/proj/PI_SAVONA/Projects/CHIP_PheWAS/.common/data/results/carriercluster/")
write.table(results_description,file = "46_1_in_carriers.txt",row.names = FALSE,col.names = TRUE,quote = FALSE,sep = "\t")
#write.table(results_description,file = paste(dir,"results_description.csv",sep=""),row.names=FALSE,col.names=TRUE,quote = FALSE,sep = ",")



#plot
colnames(results)[1]="phenotype"
setwd("/proj/PI_SAVONA/Projects/CHIP_PheWAS/.common/graph/carriercluster/")
png("46_1_in_carriers.png",width = 1000,height = 800)
phewasManhattan(results, annotate.angle=0,annotate.level=5*10^-2,title="PheWAS Manhattan Plot")
dev.off()



write.table(genotypes,file = "matched_ID_group.csv",col.names = TRUE,row.names = FALSE,sep = ",")
write.table(demo_dat,file = "demographics_dat_JAK2.csv",col.names = TRUE,row.names = FALSE,sep = ",")
save(phenotypes_dat,file = "phenotypes_dat_JAK2.RData")

